---
title: "R Coding Exercise"
---

## Loading and checking data

```{r}
#loading packages
library(dslabs)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(ggthemes)
head(gapminder)

```

## Processing data

```{r}
#get an overview of data structure
str(gapminder)
#determine the type of object gapminder is
class(gapminder)

#  Code that assigns only the African countries to a new object/variable called africadata. 
#Run str and summary on the new object you created.

# Use subset to filter rows where Continent is "Africa"
africadata <- subset(gapminder, continent == "Africa")

# Display the structure of africadata
str(africadata)

# Display summary statistics of africadata
summary(africadata)
```

```{r}
#Take the africadata object and create two new objects (name them whatever you want),
#one that contains only infant_mortality and life_expectancy and one that contains 
#only population and life_expectancy.

# Assuming africadata has columns like "infant_mortality," "life_expectancy," and "population"
# Replace column names as per your actual data frame structure


# Create object with only "infant_mortality" and "life_expectancy"
subset1 <- select(africadata, infant_mortality, life_expectancy)

# Create object with only "population" and "life_expectancy"
subset2 <- select(africadata, population, life_expectancy)

# Display the structure of subset1 and subset1
str(subset1)
str(subset2)
# Display summary statistics of subset1
summary(subset1)
summary(subset2)
```

## Plotting

```{r}
#Using the new variables you created, plot life expectancy as a function of infant mortality and as a function of population size. 
#Make two separate plots. 
#Plot the data as points. For the plot with population size on the x-axis, set the x-axis to a log scale.
# Plot life expectancy as a function of infant mortality

# using ggplot2 package to plot 
plot1 <- ggplot(subset1, aes(x = infant_mortality, y = life_expectancy)) +
  geom_point() +
  labs(title = "Life Expectancy vs. Infant Mortality",
       x = "Infant Mortality",
       y = "Life Expectancy")
plot1


```

```{r}
# Plot life expectancy as a function of population size (log scale on x-axis)
plot2 <- ggplot(subset2, aes(x = log10(population), y = life_expectancy)) +
  geom_point() +
  labs(title = "Life Expectancy vs. Population Size",
       x = "Log Population Size",
       y = "Life Expectancy")
plot2
```

## More data processing

```{r}
# Identify years with missing data for infant mortality
years_with_missing_data <- unique(africadata$year[is.na(africadata$infant_mortality)])
years_with_missing_data

# Choose the year 2000 and create a new object
africadata_2000 <- africadata[africadata$year == 2000, ]

# Display the structure of africadata_2000
str(africadata_2000)

# Display summary statistics of africadata_2000
summary(africadata_2000)
```

## More plotting

```{r}
# Plot life expectancy as a function of infant mortality for the year 2000
plot_infant_mortality <- ggplot(africadata_2000, aes(x = infant_mortality, y = life_expectancy)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Add a fitted line
  labs(title = "Life Expectancy vs. Infant Mortality (Year 2000)",
       x = "Infant Mortality",
       y = "Life Expectancy") +
  theme_hc()
plot_infant_mortality
```

```{r}
# Fit linear regression model for life expectancy vs. infant mortality
model_infant_mortality <- lm(life_expectancy ~ infant_mortality, data = africadata_2000)
summary(model_infant_mortality)
```

The linear regression model suggests a statistically significant negative relationship between infant mortality and life expectancy for the year 2000. As infant mortality increases, life expectancy is expected to decrease. The model explains a significant portion of the variability in life expectancy based on infant mortality.

```{r}

# Plot life expectancy as a function of population size (log scale on x-axis) for the year 2000
plot_population_size <- ggplot(africadata_2000, aes(x = log10(population), y = life_expectancy)) +
  geom_point() +
    geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Add a fitted line
  labs(title = "Life Expectancy vs. Population Size (Year 2000)",
       x = "Log Population Size",
       y = "Life Expectancy") +
theme_hc()
plot_population_size
```

## Simple model fits

```{r}
# Fit linear regression model for life expectancy vs. log population size
model_population_size <- lm(life_expectancy ~ log10(population), data = africadata_2000)
summary(model_population_size)
```

The linear regression model suggests that, for the year 2000, there is not enough evidence to conclude a significant relationship between log-transformed population size and life expectancy. The coefficient for log-transformed population size is not statistically significant, and the model explains only a very small percentage of the variability in life expectancy.

```{r}
# Fit linear regression model with life expectancy as the outcome and infant mortality as the predictor
fit_infant_mortality <- lm(life_expectancy ~ infant_mortality, data = africadata_2000)
summary(fit_infant_mortality)
```

The linear regression model for the year 2000 suggests a statistically significant negative relationship between infant mortality and life expectancy. As infant mortality increases, life expectancy is expected to decrease. The model explains a significant portion of the variability in life expectancy based on infant mortality.

```{r}
# Fit linear regression model with life expectancy as the outcome and population size as the predictor
fit_population_size <- lm(life_expectancy ~ log10(population), data = africadata_2000)
summary(fit_population_size)
```

The linear regression model for the year 2000 suggests that there is not enough evidence to conclude a significant relationship between log-transformed population size and life expectancy. The coefficient for log-transformed population size is not statistically significant, and the model explains only a very small percentage of the variability in life expectancy.



# This section is contributed by Chaohua Li

## More data exploration (stars)
   Choose dataset stars from the dslabs package. Details of variables in stars 
   are listed below.
   1. star: Name of star.
   2. magnitude: Absolute magnitude of the star, which is a function of the 
   star's luminosity and distance to the star.
   3. temp: Surface temperature in degrees Kelvin (K).
   4. type: Spectral class of star in the OBAFGKM system.
```{r}
#Load package dslabs and tidyverse
library("dslabs")
library("tidyverse")
#a preview of stars
head(stars)
#check structure of stars
str(stars) 
#check summary of stars
summary(stars)
```   

## Processing data (stars)
    Create star_ABKM which contains stars in the spectral classes of A/B/K/M 
    (these classes have more than 10 stars).
```{r}
#check frequencies for the spectral class of stars
table(stars$type)

#Create dataset star_ABKM that contains stars from spectral classes of A/B/K/M, as only these classes have more than 10 stars, and change type into a factor variable
star_ABKM  <- 
  stars %>% 
    filter(type %in% c("A","B","K","M")) %>%
      mutate(type=factor(type) )
#Check structure and summary of star_ABKM
str(star_ABKM) 
summary(star_ABKM)
```

## Plotting (stars)
  Plot absolute magnitude of a star as a function of log(surface temperature) 
  and as a function of spectral class.
```{r}
#Scatterplot: magnitude ~ log(temp)  
ggplot(star_ABKM, aes(log(temp), magnitude)) + 
  geom_point()

#Boxplot: magnitude ~ type  
ggplot(star_ABKM, aes(type, magnitude)) + 
  geom_boxplot()
```

## Fit 2 simple linear models(stars)
    Fit simple linear models with lm() function in R. Model 1: absolute magnitude 
    as the outcome, and log(surface temperature) as the predictor; Model 2: 
    absolute magnitude as the outcome, and spectral class as the predictor. 
    Findings: Among stars of A/B/K/M spectral classes, 1 additional unit in the 
    log(surface temperature) was significantly associated with a decrease of 7.6 
    in the absolute magnitude (P-value<0.001); class K stars(P-value=0.014) and 
    class M stars (P-value<0.001) had significantly higher absolute magnitude 
    than class A stars; class B stars (P-value=0.009) had significantly lower 
    absolute magnitude than class A stars.

```{r}
#Linear model: magnitude~log(temp)
fit1<-lm(magnitude~log(temp), data=star_ABKM)
summary(fit1)

#Linear model: magnitude~type
fit2<-lm(magnitude~type, data=star_ABKM)
summary(fit2)
```  
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
















